% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inferrnal.R
\name{cmsearch}
\alias{cmsearch}
\title{Search for Covariance Models (CM) in a set of sequences.}
\usage{
cmsearch(
  cm,
  seq,
  glocal = TRUE,
  Z = NULL,
  output = NULL,
  alignment = NULL,
  acc = FALSE,
  noali = TRUE,
  notextw = FALSE,
  textw = NULL,
  verbose = FALSE,
  E = NULL,
  t = NULL,
  incE = NULL,
  incT = NULL,
  cut_ga = FALSE,
  cut_nc = FALSE,
  cut_tc = FALSE,
  filter_strategy = NULL,
  FZ = NULL,
  Fmid = NULL,
  notrunc = FALSE,
  anytrunc = FALSE,
  nonull3 = FALSE,
  mxsize = NULL,
  smxsize = NULL,
  cyk = FALSE,
  acyk = FALSE,
  wcx = NULL,
  toponly = TRUE,
  bottomonly = FALSE,
  tformat = NULL,
  cpu = NULL,
  stall = FALSE,
  mpi = FALSE,
  quiet = TRUE,
  table_function = c("fwf", "table", "lines")
)
}
\arguments{
\item{cm}{(character of length 1) Path to the covariance model (.cm) file.
The covariance model must include calibration data from running
"\code{cmcalibrate}".}

\item{seq}{(filename, character vector,
\code{\link[Biostrings:XStringSet-class]{Biostrings::XStringSet}}, or
\code{\link[ShortRead:ShortRead-class]{ShortRead::ShortRead}} Sequences to search with the CM.
If a filename, the file can be of any type supported by Infernal.}

\item{glocal}{(\code{logical} of length 1) Whether to run the search in glocal
mode
(global with respect to the model, local with respect to the sequence).
When \code{TRUE}, the search is faster, but will fail to find matches
with only partially homologous structure.}

\item{Z}{(\code{numeric} scalar) Effective search space size in Mb for the
purposes of calculating E-values.}

\item{output}{(\code{character} filename) File to send the human-readable
output to.}

\item{alignment}{(\code{character} filename) A file to save the aligned hits to.
If given,
the alignment is saved in Stockholm format with annotations for secondary
structure, posterior probablility, etc.}

\item{acc}{(\code{logical} scalar) Use accessions instead of names in the
main output.}

\item{noali}{(\code{logical} scalar) Omit the alignment section from the main
output.}

\item{notextw}{(\code{logical} scalar) Unlimit the length of each line in the
main output.}

\item{textw}{(\code{numeric} scalar) Set the main outputâ€™s line length limit
in characters per line. Default: \code{120}.}

\item{verbose}{(\code{logical} scalar)}

\item{E}{(\code{numeric} scalar) Maximum E-value for reporting in per-target
output. Default: \code{10.0}}

\item{t}{(\code{numeric} scalar) Maximum bit score for reporting in
per-target reporting. Default: \code{NULL}}

\item{incE}{(\code{numeric} scalar) Maximum E-value for hit inclusion.
Default: \code{0.01}}

\item{incT}{(\code{numeric} scalar) Maximum bit score for hit inclusion.
Default: \code{NULL}}

\item{cut_ga}{(\code{logical} scalar) Use the GA (gathering) bit scores
defined in the CM to set hit reporting and inclusion thresholds.}

\item{cut_nc}{(\code{logical} scalar) Use the NC (noise cutoff) bit score
thresholds defined in the CM to set hit reporting and inclusion
thresholds.}

\item{cut_tc}{(\code{logical} scalar) Use the TC (trusted cutoff) bit score
thresholds defined in the CM to set hit reporting and inclusion thresholds.}

\item{filter_strategy}{(\code{character} string) Filtering strategy for the
acceleration pipeline. Options, from slowest (most sensitive) to fastest
(least sensitive) are \code{"max"}, \code{"nohmm"}, \code{"mid"}, \code{"default"}, \code{"rfam"},
\code{"hmmonly"}.}

\item{FZ}{(\code{numeric} scalar) Effective database size in Mb for
determining filter thresholds.}

\item{Fmid}{(\code{numeric} scalar) HMM filter thresholds for the "mid"
filtering strategy.  Default: \code{0.02}}

\item{notrunc}{(\code{logical} scalar) Turn off truncated hit detection.}

\item{anytrunc}{(\code{logical} scalar) Allow truncated hits to begin and end
at any position in a target sequence.}

\item{nonull3}{(\code{logical} scalar) Turn off the null3 CM score
corrections for biased composition.}

\item{mxsize}{(\code{numeric} scalar) Maximum allowable CM DP matrix size in
megabytes. Default: \code{128}}

\item{smxsize}{(\code{numeric} scalar) Maximum allowable CM search DP matrix
size in megabytes. Default: \code{128}}

\item{cyk}{(\code{logical} scalar) Use the CYK algorithm, not Inside, to
determine the final score of all hits.}

\item{acyk}{(\code{logical} scalar) Use the CYK algorithm to align hits.}

\item{wcx}{(\code{numeric} scalar) Expected maximum length of a hit, as a
multiplier of consensus length of the model.}

\item{toponly}{(\code{logical} scalar) Only search the top (Watson) strand of
target sequences.}

\item{bottomonly}{(\code{logical} scalar) Only search the bottom (Crick)
strand of target sequences.}

\item{tformat}{(\code{character} string) Format of the sequences in "\code{seq}".
Options are \code{"fasta"}, \code{"embl"}, \code{"genbank"}, \code{"ddbj"}, \code{"stockholm"},
\code{"pfam"}, \code{"a2m"}, \code{"afa"}, \code{"clustal"}, and \code{"phylip"}.
Default: autodetect}

\item{cpu}{(\code{integer} scalar) The number of threads to use in the
search.}

\item{stall}{(\code{logical} scalar) For debugging the MPI master/worker
version: pause after start, to enable the developer toattach debuggers to
the running master and worker(s) processes}

\item{mpi}{(\code{logical} scalar) Run  in  MPI  master/worker mode, using
mpirun.}

\item{quiet}{(\code{logical} scalar) Suppress standard output of \code{cmsearch},
which can be long.}

\item{table_function}{(\code{character} string) Either \code{"fwf"} (default),
\code{"table"}, or \code{"lines"}; whether to read the hits table using
\code{utils::read.fwf()}, \code{utils::read.table()}, or \code{readLines()}. Neither
of the two parsers works in all cases; \code{utils::read.fwf()} fails when
more than one CM is present in the CM file, while \code{utils::read.table()}
fails when any of the fields contain spaces.}
}
\value{
a \code{\link[base:data.frame]{base::data.frame}} with columns:
\itemize{
\item{target_name}{ (character) the name of the target sequence}
\item{taget_accession}{(character) the target's accession number}
\item{query_name}{(character) the name of the query CM}
\item{query_accession}{(character) the query CM's accession number}
\item{mdl}{(character) the model type ("cm" or "hmm")}
\item{mdl_from}{(integer) the start location of the hit in the model}
\item{mdl_to}{(integer) the end location of the hit in the model}
\item{seq_from}{(integer) the start location of the hit in the
sequence}
\item{seq_to}{(integer) the end location of the hit in the sequence}
\item{strand}{(character) the strand the hit was found on ("+" or
"-")}
\item{trunc)}{(character) whether the hit is truncated, and where
("no", "5'", "3'", "5'&3'", or "-" for hmm hits).}
\item{pass}{(integer) which algorithm pass the hit was found on.}
\item{gc}{(numeric) GC content of the hit}
\item{bias}{(numeric) biased composition correction.  See the
Infernal documentation.}
\item{score}{(numeric) bit-score of the hit, including the biased
composition correction.}
\item{E_value}{(numeric) Expectation value for the hit.}}
\item{inc}{(character) "!" if the sequence meets the inclusion
threshold, "?" if it only meets the reporting threshold.}
}
\description{
This function calls "\code{cmsearch}" from
\href{http://eddylab.org/infernal/}{Infernal}.  Infernal must be installed.
The function is focused on
retrieving the hits table and, optionally, producing an alignment.
}
\examples{
    # search sequences from a fasta file for Rfam RF00002 (5.8S rRNA)
    cm <- cm_5_8S()
    sampfasta <- sample_rRNA_fasta()
    cmsearch(cm = cm, seq = sampfasta, cpu = 1)
    # also works if the fasta file has already been loaded
    samp <- Biostrings::readDNAStringSet(sampfasta)
    cmsearch(cm = cm, seq = samp, cpu = 1)
}
